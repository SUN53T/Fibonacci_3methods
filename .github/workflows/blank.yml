#The fastest method is the library method 

import time

#start_time = time.time()
def inputt(x):
    correct = False
    while (correct==False):
         if x.isdigit()==False:
            print ("Wrong input. Please try again.")
            x = input ("Input number")
         else:
            return round(int(x))

    return round(int(x))




def fibonacci_loop(n):
    b = 1
    a = 0

    if n < 0:
        print("Incorrect input")


    elif n == 0:
        return 0


    elif n == 1:
        return 1
    for i in range(1, n):
        c = a + b
        a = b
        b = c

    return b


FibArray = [0, 1]


def fibonacci_library(n):
    if n < 0:
        print("Incorrect input")


    elif n < len(FibArray):
        return FibArray[n]
    else:
        FibArray.append(fibonacci_library(n - 1) + fibonacci_library(n - 2))
        return FibArray[n]


def fibonacci_recursion(x):
    if x == 1 or x == 2:
        return 1
    elif x <= 0:
        return 0
    else:
        x = fibonacci_recursion(x - 1) + fibonacci_recursion(x - 2)
        return x


x = inputt(input("Input number to calculate the Fibonacci function for (using loops): "))
start_time = time.time()
#time.sleep(1)
print(fibonacci_loop(x))

print("---%s seconds---" % (time.time() - start_time))

# Taking 1st two fibonacci numbers as 0 and 1


x = inputt(input("Input number to calculate the Fibonacci function for (using library): "))

start_time = time.time()
#time.sleep(1)
print(fibonacci_library(x))
end = time.time()
print("---%s seconds---" % (time.time() - start_time))



x = inputt(input("Input number to calculate the Fibonacci function for (using recursion): "))
start_time = time.time()
#time.sleep(1)
print(fibonacci_recursion(x))


print("---%s seconds---" % (time.time() - start_time))

